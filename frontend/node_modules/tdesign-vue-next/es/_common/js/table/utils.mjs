/**
 * tdesign v1.10.6
 * (c) 2024 tdesign
 * @license MIT
 */

import { i as isFunction_1 } from '../../../_chunks/dep-e38b198c.mjs';
import { i as isNumber_1 } from '../../../_chunks/dep-be7755a9.mjs';
import { g as get_1 } from '../../../_chunks/dep-0df36f23.mjs';
import '../../../_chunks/dep-c343de10.mjs';
import '../../../_chunks/dep-5d6ad0f8.mjs';
import '../../../_chunks/dep-b36c56dd.mjs';
import '../../../_chunks/dep-05274cf8.mjs';
import '../../../_chunks/dep-d10845aa.mjs';
import '../../../_chunks/dep-b9904594.mjs';
import '../../../_chunks/dep-ff82207a.mjs';
import '../../../_chunks/dep-0c393202.mjs';
import '../../../_chunks/dep-da8c0faf.mjs';
import '../../../_chunks/dep-81a441b7.mjs';
import '../../../_chunks/dep-653fadb3.mjs';
import '../../../_chunks/dep-45bc846d.mjs';
import '../../../_chunks/dep-2bcf3734.mjs';
import '../../../_chunks/dep-5005acfb.mjs';
import '../../../_chunks/dep-b1273bbc.mjs';

function filterDataByIds() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var ids = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var byId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "id";
  return data.filter(function () {
    var d = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return ids.includes(d[byId]);
  });
}
var SCROLL_DIRECTION = /* @__PURE__ */function (SCROLL_DIRECTION2) {
  SCROLL_DIRECTION2["X"] = "x";
  SCROLL_DIRECTION2["Y"] = "y";
  SCROLL_DIRECTION2["UNKNOWN"] = "unknown";
  return SCROLL_DIRECTION2;
}(SCROLL_DIRECTION || {});
var preScrollLeft;
var preScrollTop;
var getScrollDirection = function getScrollDirection(scrollLeft, scrollTop) {
  var direction = "unknown" /* UNKNOWN */;
  if (preScrollTop !== scrollTop) {
    direction = "y" /* Y */;
  } else if (preScrollLeft !== scrollLeft) {
    direction = "x" /* X */;
  }
  preScrollTop = scrollTop;
  preScrollLeft = scrollLeft;
  return direction;
};
function isRowSelectedDisabled(selectColumn, row, rowIndex) {
  if (!selectColumn) return false;
  var disabled = isFunction_1(selectColumn.disabled) ? selectColumn.disabled({
    row: row,
    rowIndex: rowIndex
  }) : selectColumn.disabled;
  if (selectColumn.checkProps) {
    if (isFunction_1(selectColumn.checkProps)) {
      disabled = disabled || selectColumn.checkProps({
        row: row,
        rowIndex: rowIndex
      }).disabled;
    } else if (selectColumn.checkProps === "object") {
      disabled = disabled || selectColumn.checkProps.disabled;
    }
  }
  return !!disabled;
}
function getColWidthAttr(col, attrKey) {
  var attr = col[attrKey];
  return isNumber_1(attr) ? attr : parseFloat(attr);
}
function getEditableKeysMap(keys, list, rowKey) {
  var map = {};
  for (var i = 0, len = list.length; i < len; i++) {
    var rowValue = get_1(list[i], rowKey);
    if (keys.includes(rowValue)) {
      map[rowValue] = true;
    }
  }
  return map;
}
function getColumnDataByKey(columns, colKey) {
  for (var i = 0, len = columns.length; i < len; i++) {
    var _columns$i$children;
    if (columns[i].colKey === colKey) return columns[i];
    if ((_columns$i$children = columns[i].children) !== null && _columns$i$children !== void 0 && _columns$i$children.length) {
      var t = getColumnDataByKey(columns[i].children, colKey);
      if (t) return t;
    }
  }
  return null;
}
function getColumnIndexByKey(columns, colKey) {
  for (var i = 0, len = columns.length; i < len; i++) {
    var _columns$i$children2;
    if (columns[i].colKey === colKey) {
      return i;
    }
    if ((_columns$i$children2 = columns[i].children) !== null && _columns$i$children2 !== void 0 && _columns$i$children2.length) {
      var t = getColumnDataByKey(columns[i].children, colKey);
      if (t) return i;
    }
  }
  return -1;
}
function getColumnsResetValue(columns) {
  var resetValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  for (var i = 0, len = columns.length; i < len; i++) {
    var _col$children;
    var col = columns[i];
    if (col.filter && "resetValue" in col.filter) {
      resetValue[col.colKey] = col.filter.resetValue;
    }
    if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
      getColumnsResetValue(col.children, resetValue);
    }
  }
  return resetValue;
}

export { SCROLL_DIRECTION, filterDataByIds, getColWidthAttr, getColumnDataByKey, getColumnIndexByKey, getColumnsResetValue, getEditableKeysMap, getScrollDirection, isRowSelectedDisabled };
//# sourceMappingURL=utils.mjs.map
