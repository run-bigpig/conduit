/**
 * tdesign v1.10.6
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _asyncToGenerator, r as regenerator } from '../_chunks/dep-2ebd3a6b.mjs';
import { isVNode, defineComponent, ref, reactive, nextTick, createVNode, onMounted, onUnmounted, watchEffect, provide, mergeProps } from 'vue';
import { getOffsetTop, ANCHOR_SHARP_REGEXP } from './utils.mjs';
import { isServer, getScrollContainer, on, getScroll, scrollTo, off } from '../utils/dom.mjs';
import props from './props.mjs';
import { useTNodeJSX } from '../hooks/tnode.mjs';
import { Affix } from '../affix/index.mjs';
import { usePrefixClass, useCommonClassName } from '../hooks/useConfig.mjs';
import { AnchorInjectionKey } from './constants.mjs';
import '../_chunks/dep-b36c56dd.mjs';
import '../_chunks/dep-c343de10.mjs';
import '../_chunks/dep-5639eb7d.mjs';
import '../_chunks/dep-5d6ad0f8.mjs';
import '../_chunks/dep-0c393202.mjs';
import '../_chunks/dep-da8c0faf.mjs';
import '../_chunks/dep-b9904594.mjs';
import '../_chunks/dep-e38b198c.mjs';
import '../_chunks/dep-05274cf8.mjs';
import '../_chunks/dep-d10845aa.mjs';
import '../utils/easing.mjs';
import '../_chunks/dep-9f3c7a03.mjs';
import '../_chunks/dep-b1273bbc.mjs';
import '../_chunks/dep-81a441b7.mjs';
import '../_chunks/dep-8c4e0f42.mjs';
import '../_chunks/dep-5b0920c8.mjs';
import '../_chunks/dep-0d26b449.mjs';
import '../_chunks/dep-90feab0a.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-fb32dbe0.mjs';
import '../_chunks/dep-eda9976d.mjs';
import '../_chunks/dep-c7111b68.mjs';
import '../_chunks/dep-aaf0a453.mjs';
import '../_chunks/dep-2bcf3734.mjs';
import '../_chunks/dep-4e9148a5.mjs';
import '../_chunks/dep-45bc846d.mjs';
import '../_chunks/dep-f03d2f0f.mjs';
import '../_chunks/dep-67e3536c.mjs';
import '../affix/affix.mjs';
import '../_chunks/dep-860543c8.mjs';
import '../affix/props.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-5a707436.mjs';
import '../_chunks/dep-bc6946b4.mjs';
import '../_chunks/dep-a33ab1de.mjs';
import '../_chunks/dep-653fadb3.mjs';
import '../_chunks/dep-5005acfb.mjs';
import '../_chunks/dep-754933cb.mjs';
import '../_chunks/dep-6d263d27.mjs';
import '../_chunks/dep-5d631aa0.mjs';
import '../_chunks/dep-94da3846.mjs';
import '../_chunks/dep-28ab9e3e.mjs';
import '../_chunks/dep-0d4a3f7e.mjs';
import '../_chunks/dep-bd1b86d0.mjs';
import '../_chunks/dep-37ea0644.mjs';
import '../_chunks/dep-1d4985f2.mjs';
import '../_chunks/dep-ace4b3db.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../_chunks/dep-5101fc98.mjs';
import '../_chunks/dep-06adc476.mjs';
import '../_chunks/dep-eb1a861a.mjs';
import '../config-provider/type.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../affix/type.mjs';

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var _Anchor = defineComponent({
  name: "TAnchor",
  inheritAttrs: false,
  props: props,
  setup: function setup(props2, _ref) {
    var attrs = _ref.attrs;
    var anchorRef = ref(null);
    var links = ref([]);
    var active = ref("");
    var scrollContainer = ref(null);
    var handleScrollLock = ref(false);
    var activeLineStyle = reactive({});
    var COMPONENT_NAME = usePrefixClass("anchor");
    var ANCHOR_LINE_CLASSNAME = usePrefixClass("anchor__line");
    var ANCHOR_LINE_CURSOR_CLASSNAME = usePrefixClass("anchor__line-cursor");
    var _useCommonClassName = useCommonClassName(),
      STATUS = _useCommonClassName.STATUS,
      SIZE = _useCommonClassName.SIZE;
    var renderTNodeJSX = useTNodeJSX();
    var getScrollContainer$1 = function getScrollContainer$1() {
      if (isServer) {
        return;
      }
      var container = props2.container;
      scrollContainer.value = getScrollContainer(container);
      on(scrollContainer.value, "scroll", handleScroll);
      handleScroll();
    };
    var handleScroll = function handleScroll() {
      if (handleScrollLock.value) return;
      var bounds = props2.bounds,
        targetOffset = props2.targetOffset;
      var filters = [];
      var active2 = "";
      links.value.forEach(function (link) {
        var anchor = getAnchorTarget(link);
        if (!anchor) {
          return;
        }
        var top = getOffsetTop(anchor, scrollContainer.value);
        if (top < bounds + targetOffset) {
          filters.push({
            link: link,
            top: top
          });
        }
      });
      if (filters.length) {
        var latest = filters.reduce(function (prev, cur) {
          return prev.top > cur.top ? prev : cur;
        });
        active2 = latest.link;
      }
      setCurrentActiveLink(active2);
    };
    var getAnchorTarget = function getAnchorTarget(link) {
      var matcher = link.match(ANCHOR_SHARP_REGEXP);
      if (!matcher) {
        return;
      }
      var anchor = document.getElementById(matcher[1]);
      if (!anchor) {
        return;
      }
      return anchor;
    };
    var registerLink = function registerLink(link) {
      if (!ANCHOR_SHARP_REGEXP.test(link) || links.value.indexOf(link) !== -1) {
        return;
      }
      links.value.push(link);
    };
    var unregisterLink = function unregisterLink(link) {
      links.value = links.value.filter(function (each) {
        return each !== link;
      });
    };
    var setCurrentActiveLink = /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator(/*#__PURE__*/regenerator.mark(function _callee(link) {
        var _props2$onChange;
        return regenerator.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!(active.value === link)) {
                _context.next = 2;
                break;
              }
              return _context.abrupt("return");
            case 2:
              active.value = link;
              (_props2$onChange = props2.onChange) === null || _props2$onChange === void 0 || _props2$onChange.call(props2, link, active.value);
              _context.next = 6;
              return nextTick();
            case 6:
              updateActiveLine();
            case 7:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return function setCurrentActiveLink(_x) {
        return _ref2.apply(this, arguments);
      };
    }();
    var updateActiveLine = function updateActiveLine() {
      var _anchorRef$value;
      var ele = (_anchorRef$value = anchorRef.value) === null || _anchorRef$value === void 0 ? void 0 : _anchorRef$value.querySelector(".".concat(STATUS.value.active, ">a"));
      if (!ele) {
        Object.assign(activeLineStyle, {});
        return;
      }
      var top = ele.offsetTop,
        height = ele.offsetHeight;
      Object.assign(activeLineStyle, {
        top: "".concat(top, "px"),
        height: "".concat(height, "px"),
        opacity: 1
      });
    };
    var handleLinkClick = function handleLinkClick(link) {
      var _props2$onClick;
      (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 || _props2$onClick.call(props2, link);
    };
    var handleScrollTo = /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator(/*#__PURE__*/regenerator.mark(function _callee2(link) {
        var anchor, targetOffset, scrollTop, offsetTop, top;
        return regenerator.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              anchor = getAnchorTarget(link);
              setCurrentActiveLink(link);
              if (anchor) {
                _context2.next = 4;
                break;
              }
              return _context2.abrupt("return");
            case 4:
              handleScrollLock.value = true;
              targetOffset = props2.targetOffset;
              scrollTop = getScroll(scrollContainer.value);
              offsetTop = getOffsetTop(anchor, scrollContainer.value);
              top = scrollTop + offsetTop - targetOffset;
              _context2.next = 11;
              return scrollTo(top, {
                container: scrollContainer.value
              });
            case 11:
              handleScrollLock.value = false;
            case 12:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      return function handleScrollTo(_x2) {
        return _ref3.apply(this, arguments);
      };
    }();
    var renderCursor = function renderCursor() {
      var titleContent = renderTNodeJSX("cursor");
      return titleContent || createVNode("div", {
        "class": ANCHOR_LINE_CURSOR_CLASSNAME.value
      }, null);
    };
    onMounted(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/regenerator.mark(function _callee3() {
      return regenerator.wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            getScrollContainer$1();
            if (!active.value) {
              _context3.next = 5;
              break;
            }
            _context3.next = 4;
            return nextTick();
          case 4:
            handleScrollTo(active.value);
          case 5:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    })));
    onUnmounted(function () {
      if (!scrollContainer.value) return;
      off(scrollContainer.value, "scroll", handleScroll);
    });
    watchEffect(function () {
      if (scrollContainer.value) {
        off(scrollContainer.value, "scroll", handleScroll);
      }
      getScrollContainer$1();
    });
    provide(AnchorInjectionKey, reactive({
      registerLink: registerLink,
      unregisterLink: unregisterLink,
      handleScrollTo: handleScrollTo,
      handleLinkClick: handleLinkClick,
      active: active
    }));
    return function () {
      var size = props2.size,
        affixProps = props2.affixProps;
      var className = [COMPONENT_NAME.value, SIZE.value[size]];
      var content = createVNode("div", mergeProps({
        "ref": anchorRef,
        "class": className
      }, attrs), [createVNode("div", {
        "class": ANCHOR_LINE_CLASSNAME.value
      }, [createVNode("div", {
        "class": "".concat(ANCHOR_LINE_CURSOR_CLASSNAME.value, "-wrapper"),
        "style": activeLineStyle
      }, [renderCursor()])]), renderTNodeJSX("default")]);
      if (affixProps) {
        return createVNode(Affix, affixProps, _isSlot(content) ? content : {
          "default": function _default() {
            return [content];
          }
        });
      }
      return content;
    };
  }
});

export { _Anchor as default };
//# sourceMappingURL=anchor.mjs.map
