/**
 * tdesign v1.10.6
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _slicedToArray } from '../../_chunks/dep-b250efbd.mjs';
import { toRefs, computed, ref, watchEffect } from 'vue';
import useVModel from '../../hooks/useVModel.mjs';
import { i as isArray_1 } from '../../_chunks/dep-0c393202.mjs';
import { g as getDefaultFormat, h as extractTimeFormat, d as isValidDate, i as initYearMonthTime, f as formatDate, a as formatTime } from '../../_chunks/dep-7c9a23af.mjs';
import '../../_chunks/dep-13773b3a.mjs';
import '../../_chunks/dep-90feab0a.mjs';
import '../../_chunks/dep-c343de10.mjs';
import '../../_chunks/dep-0d26b449.mjs';
import '../../_chunks/dep-b1273bbc.mjs';
import '../../_chunks/dep-5d6ad0f8.mjs';
import '../../_chunks/dep-b36c56dd.mjs';
import '../../_chunks/dep-da8c0faf.mjs';
import '../../_chunks/dep-81a441b7.mjs';
import '../../_chunks/dep-b9904594.mjs';
import '../../_chunks/dep-5639eb7d.mjs';
import '../../_chunks/dep-06adc476.mjs';
import '../../_chunks/dep-2cd917b7.mjs';
import '../../_chunks/dep-e38b198c.mjs';
import '../../_chunks/dep-05274cf8.mjs';
import '../../_chunks/dep-d10845aa.mjs';
import '../../_chunks/dep-1e07ea1c.mjs';
import '../../_chunks/dep-5b0920c8.mjs';
import '../../_chunks/dep-ace4b3db.mjs';
import '../../_chunks/dep-5005acfb.mjs';
import '../../_chunks/dep-aaf0a453.mjs';
import '../../_chunks/dep-2bcf3734.mjs';
import '../../_chunks/dep-5d631aa0.mjs';
import '../../_chunks/dep-d51c0ccf.mjs';
import '../../_chunks/dep-98a67207.mjs';
import '../../_common/js/log/index.mjs';
import '../../_common/js/log/log.mjs';

var PARTIAL_MAP = {
  first: "start",
  second: "end"
};
function useRangeValue(props) {
  var _toRefs = toRefs(props),
    valueFromProps = _toRefs.value,
    modelValue = _toRefs.modelValue;
  var _useVModel = useVModel(valueFromProps, modelValue, props.defaultValue, props.onChange),
    _useVModel2 = _slicedToArray(_useVModel, 2),
    value = _useVModel2[0],
    onChange = _useVModel2[1];
  var formatRef = computed(function () {
    return getDefaultFormat({
      mode: props.mode,
      format: props.format,
      valueType: props.valueType,
      enableTimePicker: props.enableTimePicker
    });
  });
  if (props.enableTimePicker) {
    if (!extractTimeFormat(formatRef.value.format)) console.error("format: ".concat(formatRef.value.format, " \u4E0D\u89C4\u8303\uFF0C\u5305\u542B\u65F6\u95F4\u9009\u62E9\u5FC5\u987B\u8981\u6709\u65F6\u95F4\u683C\u5F0F\u5316 HH:mm:ss"));
  }
  if (!isArray_1(value.value)) {
    console.error("typeof value: ".concat(value.value, " must be Array!"));
  } else if (!isValidDate(value.value, formatRef.value.format)) {
    console.error("value: ".concat(value.value, " is invalid dateTime! Check whether the value is consistent with format: ").concat(formatRef.value.format));
  }
  var isFirstValueSelected = ref(false);
  var time = ref(initYearMonthTime({
    value: value.value,
    mode: props.mode,
    format: formatRef.value.format,
    timeFormat: formatRef.value.timeFormat
  }).time);
  var month = ref(initYearMonthTime({
    value: value.value,
    mode: props.mode,
    format: formatRef.value.format,
    enableTimePicker: props.enableTimePicker
  }).month);
  var year = ref(initYearMonthTime({
    value: value.value,
    mode: props.mode,
    format: formatRef.value.format
  }).year);
  var cacheValue = ref(formatDate(value.value, {
    format: formatRef.value.format
  }));
  watchEffect(function () {
    if (!value.value) {
      cacheValue.value = [];
      return;
    }
    if (!isValidDate(value.value, formatRef.value.format)) return;
    cacheValue.value = formatDate(value.value, {
      format: formatRef.value.valueType,
      targetFormat: formatRef.value.format
    });
    time.value = formatTime(value.value, formatRef.value.format, formatRef.value.timeFormat, props.defaultTime);
  });
  return {
    year: year,
    month: month,
    value: value,
    time: time,
    isFirstValueSelected: isFirstValueSelected,
    cacheValue: cacheValue,
    onChange: onChange
  };
}

export { PARTIAL_MAP, useRangeValue as default };
//# sourceMappingURL=useRangeValue.mjs.map
