/**
 * tdesign v1.10.6
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-2cd917b7.mjs';
import { defineComponent, ref, computed, nextTick, createVNode, watch, onUpdated, onMounted, onBeforeUnmount, Teleport, mergeProps } from 'vue';
import { CloseIcon } from 'tdesign-icons-vue-next';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import { useGlobalIcon } from '../hooks/useGlobalIcon.mjs';
import { isServer } from '../utils/dom.mjs';
import { getScrollbarWidth } from '../_common/js/utils/getScrollbarWidth.mjs';
import props from './props.mjs';
import { useAction } from '../dialog/hooks.mjs';
import { useTNodeJSX, useContent } from '../hooks/tnode.mjs';
import { useDrag } from './hooks.mjs';
import useTeleport from '../hooks/useTeleport.mjs';
import { useConfig } from '../config-provider/useConfig.mjs';
import '../_chunks/dep-b36c56dd.mjs';
import '../_chunks/dep-c343de10.mjs';
import '../_chunks/dep-5639eb7d.mjs';
import '../_chunks/dep-5d6ad0f8.mjs';
import '../_chunks/dep-0c393202.mjs';
import '../_chunks/dep-da8c0faf.mjs';
import '../_chunks/dep-b9904594.mjs';
import '../_chunks/dep-e38b198c.mjs';
import '../_chunks/dep-05274cf8.mjs';
import '../_chunks/dep-d10845aa.mjs';
import '../utils/easing.mjs';
import '../_common/js/utils/helper.mjs';
import '../_chunks/dep-769cdfcc.mjs';
import '../_chunks/dep-13773b3a.mjs';
import '../_chunks/dep-62613491.mjs';
import '../_chunks/dep-b250efbd.mjs';
import '../_chunks/dep-41afea2a.mjs';
import '../_chunks/dep-860543c8.mjs';
import '../_chunks/dep-be7755a9.mjs';
import '../_chunks/dep-d2ce4e2b.mjs';
import '../_chunks/dep-b1273bbc.mjs';
import '../_chunks/dep-81a441b7.mjs';
import '../_chunks/dep-bc6946b4.mjs';
import '../_chunks/dep-a33ab1de.mjs';
import '../_chunks/dep-653fadb3.mjs';
import '../_chunks/dep-45bc846d.mjs';
import '../_chunks/dep-2bcf3734.mjs';
import '../_chunks/dep-5005acfb.mjs';
import '../_chunks/dep-c7111b68.mjs';
import '../_chunks/dep-aaf0a453.mjs';
import '../_chunks/dep-4e9148a5.mjs';
import '../_chunks/dep-754933cb.mjs';
import '../_chunks/dep-6d263d27.mjs';
import '../_chunks/dep-67e3536c.mjs';
import '../_chunks/dep-5d631aa0.mjs';
import '../_chunks/dep-eda9976d.mjs';
import '../_chunks/dep-f03d2f0f.mjs';
import '../_chunks/dep-94da3846.mjs';
import '../_chunks/dep-ff82207a.mjs';
import '../_chunks/dep-78e0bb48.mjs';
import '../_chunks/dep-5b0920c8.mjs';
import '../_chunks/dep-1d4985f2.mjs';
import '../_chunks/dep-78a897b3.mjs';
import '../_chunks/dep-37ea0644.mjs';
import '../_chunks/dep-bd1b86d0.mjs';
import '../button/index.mjs';
import '../button/button.mjs';
import '../loading/index.mjs';
import '../_chunks/dep-77ea84d8.mjs';
import '../_chunks/dep-28ab9e3e.mjs';
import '../_chunks/dep-0d4a3f7e.mjs';
import '../_chunks/dep-ace4b3db.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../_chunks/dep-5101fc98.mjs';
import '../_chunks/dep-06adc476.mjs';
import '../_chunks/dep-eb1a861a.mjs';
import '../_chunks/dep-1dda5d5d.mjs';
import '../_chunks/dep-0b5c77ed.mjs';
import '../_chunks/dep-4a6bdbd3.mjs';
import '../_chunks/dep-0df36f23.mjs';
import '../_chunks/dep-29715a4a.mjs';
import '../_chunks/dep-6502b585.mjs';
import '../loading/plugin.mjs';
import '../loading/loading.mjs';
import '../loading/icon/gradient.mjs';
import '../_common/js/loading/circle-adapter.mjs';
import '../_common/js/utils/set-style.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-fb32dbe0.mjs';
import '../_chunks/dep-9f3c7a03.mjs';
import '../_chunks/dep-8c4e0f42.mjs';
import '../_chunks/dep-0d26b449.mjs';
import '../_chunks/dep-90feab0a.mjs';
import '../loading/props.mjs';
import '../_chunks/dep-5a707436.mjs';
import '../config-provider/type.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../loading/type.mjs';
import '../button/props.mjs';
import '../hooks/useRipple.mjs';
import '../hooks/useKeepAnimation.mjs';
import '../utils/set-style.mjs';
import '../hooks/useDisabled.mjs';
import '../_chunks/dep-208ab852.mjs';
import '../button/type.mjs';
import '../_common/js/drawer/utils.mjs';

var key = 1;
var _Drawer = defineComponent({
  name: "TDrawer",
  inheritAttrs: false,
  props: props,
  emits: ["update:visible"],
  setup: function setup(props2, context) {
    var destroyOnCloseVisible = ref(false);
    var isVisible = ref(false);
    var styleEl = ref();
    var styleTimer = ref();
    var _useConfig = useConfig("drawer"),
      globalConfig = _useConfig.globalConfig;
    var _useGlobalIcon = useGlobalIcon({
        CloseIcon: CloseIcon
      }),
      CloseIcon$1 = _useGlobalIcon.CloseIcon;
    var renderTNodeJSX = useTNodeJSX();
    var renderContent = useContent();
    var COMPONENT_NAME = usePrefixClass("drawer");
    var _useDrag = useDrag(props2),
      draggedSizeValue = _useDrag.draggedSizeValue,
      enableDrag = _useDrag.enableDrag,
      draggableLineStyles = _useDrag.draggableLineStyles;
    var teleportElement = useTeleport(function () {
      return props2.attach;
    });
    var confirmBtnAction = function confirmBtnAction(e) {
      var _props2$onConfirm;
      (_props2$onConfirm = props2.onConfirm) === null || _props2$onConfirm === void 0 || _props2$onConfirm.call(props2, {
        e: e
      });
    };
    var cancelBtnAction = function cancelBtnAction(e) {
      var _props2$onCancel;
      (_props2$onCancel = props2.onCancel) === null || _props2$onCancel === void 0 || _props2$onCancel.call(props2, {
        e: e
      });
      closeDrawer({
        trigger: "cancel",
        e: e
      });
    };
    var _useAction = useAction({
        confirmBtnAction: confirmBtnAction,
        cancelBtnAction: cancelBtnAction
      }),
      getConfirmBtn = _useAction.getConfirmBtn,
      getCancelBtn = _useAction.getCancelBtn;
    var drawerEle = ref(null);
    var drawerClasses = computed(function () {
      return [COMPONENT_NAME.value, "".concat(COMPONENT_NAME.value, "--").concat(props2.placement), _defineProperty(_defineProperty(_defineProperty({}, "".concat(COMPONENT_NAME.value, "--open"), isVisible.value), "".concat(COMPONENT_NAME.value, "--attach"), props2.showInAttachedElement), "".concat(COMPONENT_NAME.value, "--without-mask"), !props2.showOverlay)];
    });
    var sizeValue = computed(function () {
      var _props2$size;
      if (draggedSizeValue.value) return draggedSizeValue.value;
      var size = (_props2$size = props2.size) !== null && _props2$size !== void 0 ? _props2$size : globalConfig.value.size;
      var defaultSize = isNaN(Number(size)) ? size : "".concat(size, "px");
      return {
        small: "300px",
        medium: "500px",
        large: "760px"
      }[size] || defaultSize;
    });
    var wrapperStyles = computed(function () {
      return {
        transform: isVisible.value ? "translateX(0)" : void 0,
        width: ["left", "right"].includes(props2.placement) ? sizeValue.value : "",
        height: ["top", "bottom"].includes(props2.placement) ? sizeValue.value : ""
      };
    });
    var wrapperClasses = computed(function () {
      return ["".concat(COMPONENT_NAME.value, "__content-wrapper"), "".concat(COMPONENT_NAME.value, "__content-wrapper--").concat(props2.placement)];
    });
    var parentNode = computed(function () {
      return drawerEle.value && drawerEle.value.parentNode;
    });
    var modeAndPlacement = computed(function () {
      return [props2.mode, props2.placement].join();
    });
    var footerStyle = computed(function () {
      return {
        display: "flex",
        justifyContent: props2.placement === "right" ? "flex-start" : "flex-end"
      };
    });
    var handleEscKeydown = function handleEscKeydown(e) {
      var _props2$closeOnEscKey;
      if (((_props2$closeOnEscKey = props2.closeOnEscKeydown) !== null && _props2$closeOnEscKey !== void 0 ? _props2$closeOnEscKey : globalConfig.value.closeOnEscKeydown) && e.key === "Escape" && isVisible.value) {
        var _props2$onEscKeydown;
        (_props2$onEscKeydown = props2.onEscKeydown) === null || _props2$onEscKeydown === void 0 || _props2$onEscKeydown.call(props2, {
          e: e
        });
        closeDrawer({
          trigger: "esc",
          e: e
        });
      }
    };
    var clearStyleFunc = function clearStyleFunc() {
      clearTimeout(styleTimer.value);
      styleTimer.value = setTimeout(function () {
        var _styleEl$value, _styleEl$value$remove;
        (_styleEl$value = styleEl.value) === null || _styleEl$value === void 0 || (_styleEl$value = _styleEl$value.parentNode) === null || _styleEl$value === void 0 || (_styleEl$value$remove = _styleEl$value.removeChild) === null || _styleEl$value$remove === void 0 || _styleEl$value$remove.call(_styleEl$value, styleEl.value);
      }, 150);
    };
    var handlePushMode = function handlePushMode() {
      if (props2.mode !== "push") return;
      nextTick(function () {
        if (!parentNode.value) return;
        parentNode.value.style.cssText = "transition: margin 300ms cubic-bezier(0.7, 0.3, 0.1, 1) 0s;";
      });
    };
    var updatePushMode = function updatePushMode() {
      if (!parentNode.value) return;
      if (props2.mode !== "push" || !parentNode.value) return;
      var marginStr = {
        left: "margin: 0 0 0 ".concat(sizeValue.value),
        right: "margin: 0 0 0 -".concat(sizeValue.value),
        top: "margin: ".concat(sizeValue.value, " 0 0 0"),
        bottom: "margin: -".concat(sizeValue.value, " 0 0 0")
      }[props2.placement];
      if (isVisible.value) {
        parentNode.value.style.cssText += marginStr;
      } else {
        parentNode.value.style.cssText = parentNode.value.style.cssText.replace(/margin:.+;/, "");
      }
    };
    var getDefaultFooter = function getDefaultFooter() {
      var confirmBtn = getConfirmBtn({
        confirmBtn: props2.confirmBtn,
        globalConfirm: globalConfig.value.confirm,
        className: "".concat(COMPONENT_NAME.value, "__confirm")
      });
      var cancelBtn = getCancelBtn({
        cancelBtn: props2.cancelBtn,
        globalCancel: globalConfig.value.cancel,
        className: "".concat(COMPONENT_NAME.value, "__cancel")
      });
      return createVNode("div", {
        "style": footerStyle.value
      }, [props2.placement === "right" ? confirmBtn : null, cancelBtn, props2.placement !== "right" ? confirmBtn : null]);
    };
    watch(modeAndPlacement, function () {
      handlePushMode();
    }, {
      immediate: true
    });
    watch(function () {
      return props2.visible;
    }, function (value) {
      var _props2$onBeforeOpen, _props2$onBeforeClose;
      if (isServer) return;
      if (value) {
        if (!props2.showInAttachedElement && props2.preventScrollThrough) {
          styleEl.value && document.head.appendChild(styleEl.value);
        }
      } else {
        clearStyleFunc();
      }
      value ? (_props2$onBeforeOpen = props2.onBeforeOpen) === null || _props2$onBeforeOpen === void 0 ? void 0 : _props2$onBeforeOpen.call(props2) : (_props2$onBeforeClose = props2.onBeforeClose) === null || _props2$onBeforeClose === void 0 ? void 0 : _props2$onBeforeClose.call(props2);
      if (props2.destroyOnClose) {
        if (value) {
          destroyOnCloseVisible.value = false;
          setTimeout(function () {
            isVisible.value = true;
          });
        } else {
          isVisible.value = false;
          setTimeout(function () {
            destroyOnCloseVisible.value = true;
          }, 200);
        }
      } else if (destroyOnCloseVisible.value === true && value) {
        destroyOnCloseVisible.value = false;
        setTimeout(function () {
          isVisible.value = true;
        });
      } else {
        isVisible.value = value;
      }
    }, {
      immediate: true
    });
    var handleCloseBtnClick = function handleCloseBtnClick(e) {
      var _props2$onCloseBtnCli;
      (_props2$onCloseBtnCli = props2.onCloseBtnClick) === null || _props2$onCloseBtnCli === void 0 || _props2$onCloseBtnCli.call(props2, {
        e: e
      });
      closeDrawer({
        trigger: "close-btn",
        e: e
      });
    };
    var handleWrapperClick = function handleWrapperClick(e) {
      var _props2$onOverlayClic, _props2$closeOnOverla;
      (_props2$onOverlayClic = props2.onOverlayClick) === null || _props2$onOverlayClic === void 0 || _props2$onOverlayClic.call(props2, {
        e: e
      });
      if ((_props2$closeOnOverla = props2.closeOnOverlayClick) !== null && _props2$closeOnOverla !== void 0 ? _props2$closeOnOverla : globalConfig.value.closeOnOverlayClick) {
        closeDrawer({
          trigger: "overlay",
          e: e
        });
      }
    };
    var closeDrawer = function closeDrawer(params) {
      var _props2$onClose;
      (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 || _props2$onClose.call(props2, params);
      context.emit("update:visible", false);
    };
    onUpdated(function () {
      updatePushMode();
    });
    onMounted(function () {
      var hasScrollBar = window.innerWidth > document.documentElement.clientWidth;
      var scrollWidth = hasScrollBar ? getScrollbarWidth() : 0;
      styleEl.value = document.createElement("style");
      styleEl.value.dataset.id = "td_drawer_".concat(+new Date(), "_").concat(key += 1);
      styleEl.value.innerHTML = "\n        html body {\n          overflow-y: hidden;\n          transition: margin 300ms cubic-bezier(0.7, 0.3, 0.1, 1) 0s;\n          ".concat(props2.mode === "push" ? "" : "width: calc(100% - ".concat(scrollWidth, "px);"), "\n        }\n      ");
      if (isVisible.value && !props2.showInAttachedElement && props2.preventScrollThrough) {
        document.head.appendChild(styleEl.value);
      }
      window.addEventListener("keydown", handleEscKeydown);
    });
    onBeforeUnmount(function () {
      clearStyleFunc();
      window.removeEventListener("keydown", handleEscKeydown);
    });
    return function () {
      if (destroyOnCloseVisible.value) return;
      var body = renderContent("body", "default");
      var headerContent = renderTNodeJSX("header");
      var defaultFooter = getDefaultFooter();
      return createVNode(Teleport, {
        "disabled": !props2.attach || !teleportElement.value,
        "to": teleportElement.value
      }, {
        "default": function _default() {
          return [createVNode("div", mergeProps({
            "ref": drawerEle,
            "class": drawerClasses.value,
            "style": {
              zIndex: props2.zIndex
            },
            "onKeydown": handleEscKeydown,
            "tabindex": 0
          }, context.attrs), [props2.showOverlay && createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__mask"),
            "onClick": handleWrapperClick
          }, null), createVNode("div", {
            "class": wrapperClasses.value,
            "style": wrapperStyles.value
          }, [headerContent && createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__header")
          }, [headerContent]), props2.closeBtn && createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__close-btn"),
            "onClick": handleCloseBtnClick
          }, [renderTNodeJSX("closeBtn", createVNode(CloseIcon$1, null, null))]), createVNode("div", {
            "class": ["".concat(COMPONENT_NAME.value, "__body"), "narrow-scrollbar"]
          }, [body]), props2.footer && createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__footer")
          }, [renderTNodeJSX("footer", defaultFooter)]), props2.sizeDraggable && createVNode("div", {
            "style": draggableLineStyles.value,
            "onMousedown": enableDrag
          }, null)])])];
        }
      });
    };
  }
});

export { _Drawer as default };
//# sourceMappingURL=drawer.mjs.map
