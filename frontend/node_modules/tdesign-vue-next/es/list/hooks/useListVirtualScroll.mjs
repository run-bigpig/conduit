/**
 * tdesign v1.10.6
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../../_chunks/dep-2cd917b7.mjs';
import { computed } from 'vue';
import '../../_common/js/log/index.mjs';
import useVirtualScroll from '../../hooks/useVirtualScrollNew.mjs';
import log from '../../_common/js/log/log.mjs';
import '../../_chunks/dep-b36c56dd.mjs';
import '../../_chunks/dep-769cdfcc.mjs';
import '../../_chunks/dep-13773b3a.mjs';
import '../../_chunks/dep-b250efbd.mjs';
import '../../hooks/useResizeObserver.mjs';
import '../../_chunks/dep-c343de10.mjs';
import '../../_chunks/dep-81a441b7.mjs';
import '../../_chunks/dep-5d6ad0f8.mjs';
import '../../_chunks/dep-b9904594.mjs';
import '../../_chunks/dep-bd1b86d0.mjs';
import '../../_chunks/dep-b523a7a1.mjs';
import '../../_chunks/dep-5094012f.mjs';
import '../../_chunks/dep-05274cf8.mjs';
import '../../_chunks/dep-d10845aa.mjs';
import '../../_chunks/dep-98a67207.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var useListVirtualScroll = function useListVirtualScroll(scroll, listRef, listItems) {
  var virtualScrollParams = computed(function () {
    return {
      data: listItems.value,
      scroll: scroll
    };
  });
  var virtualConfig = useVirtualScroll(listRef, virtualScrollParams);
  var isVirtualScroll = computed(function () {
    return virtualConfig.isVirtualScroll.value;
  });
  var lastScrollY = -1;
  var onInnerVirtualScroll = function onInnerVirtualScroll(e) {
    var target = e.target || e.srcElement;
    var top = target.scrollTop;
    if (lastScrollY !== top) {
      virtualConfig.isVirtualScroll.value && virtualConfig.handleScroll();
    } else {
      lastScrollY = -1;
    }
    lastScrollY = top;
  };
  var cursorStyle = computed(function () {
    return {
      position: "absolute",
      width: "1px",
      height: "1px",
      transition: "transform 0.2s",
      transform: "translate(0, ".concat(virtualConfig.scrollHeight.value, "px)"),
      "-ms-transform": "translate(0, ".concat(virtualConfig.scrollHeight.value, "px)"),
      "-moz-transform": "translate(0, ".concat(virtualConfig.scrollHeight.value, "px)"),
      "-webkit-transform": "translate(0, ".concat(virtualConfig.scrollHeight.value, "px)")
    };
  });
  var listStyle = computed(function () {
    return {
      transform: "translate(0, ".concat(virtualConfig.translateY.value, "px)"),
      "-ms-transform": "translate(0, ".concat(virtualConfig.translateY.value, "px)"),
      "-moz-transform": "translate(0, ".concat(virtualConfig.translateY.value, "px)"),
      "-webkit-transform": "translate(0, ".concat(virtualConfig.translateY.value, "px)")
    };
  });
  var handleScrollTo = function handleScrollTo(params) {
    var index = params.index,
      key = params.key;
    var targetIndex = index === 0 ? index : index !== null && index !== void 0 ? index : Number(key);
    if (!targetIndex && targetIndex !== 0) {
      log.error("List", "scrollTo: `index` or `key` must exist.");
      return;
    }
    if (targetIndex < 0 || targetIndex >= listItems.value.length) {
      log.error("List", "".concat(targetIndex, " does not exist in data, check `index` or `key` please."));
      return;
    }
    virtualConfig.scrollToElement(_objectSpread(_objectSpread({}, params), {}, {
      index: targetIndex - 1
    }));
  };
  return {
    virtualConfig: virtualConfig,
    cursorStyle: cursorStyle,
    listStyle: listStyle,
    isVirtualScroll: isVirtualScroll,
    onInnerVirtualScroll: onInnerVirtualScroll,
    scrollToElement: handleScrollTo
  };
};

export { useListVirtualScroll };
//# sourceMappingURL=useListVirtualScroll.mjs.map
