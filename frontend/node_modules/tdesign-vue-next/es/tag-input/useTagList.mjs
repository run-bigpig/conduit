/**
 * tdesign v1.10.6
 * (c) 2024 tdesign
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-2cd917b7.mjs';
import { _ as _toConsumableArray } from '../_chunks/dep-769cdfcc.mjs';
import { _ as _slicedToArray } from '../_chunks/dep-b250efbd.mjs';
import { toRefs, ref, createVNode, mergeProps } from 'vue';
import { Tag } from '../tag/index.mjs';
import useVModel from '../hooks/useVModel.mjs';
import { usePrefixClass } from '../hooks/useConfig.mjs';
import { useTNodeJSX } from '../hooks/tnode.mjs';
import { useDisabled } from '../hooks/useDisabled.mjs';
import { useReadonly } from '../hooks/useReadonly.mjs';
import '../_chunks/dep-b36c56dd.mjs';
import '../_chunks/dep-13773b3a.mjs';
import '../tag/tag.mjs';
import 'tdesign-icons-vue-next';
import '../_chunks/dep-5639eb7d.mjs';
import '../_chunks/dep-c343de10.mjs';
import '../_chunks/dep-5d6ad0f8.mjs';
import '../_chunks/dep-0c393202.mjs';
import '../_chunks/dep-da8c0faf.mjs';
import '../_chunks/dep-b9904594.mjs';
import '../_chunks/dep-d6c61759.mjs';
import '../tag/props.mjs';
import '../hooks/useGlobalIcon.mjs';
import '../config-provider/useConfig.mjs';
import '../_chunks/dep-e38b198c.mjs';
import '../_chunks/dep-05274cf8.mjs';
import '../_chunks/dep-d10845aa.mjs';
import '../_chunks/dep-5a707436.mjs';
import '../_chunks/dep-bc6946b4.mjs';
import '../_chunks/dep-a33ab1de.mjs';
import '../_chunks/dep-653fadb3.mjs';
import '../_chunks/dep-45bc846d.mjs';
import '../_chunks/dep-2bcf3734.mjs';
import '../_chunks/dep-5005acfb.mjs';
import '../_chunks/dep-c7111b68.mjs';
import '../_chunks/dep-aaf0a453.mjs';
import '../_chunks/dep-4e9148a5.mjs';
import '../_chunks/dep-754933cb.mjs';
import '../_chunks/dep-6d263d27.mjs';
import '../_chunks/dep-67e3536c.mjs';
import '../_chunks/dep-5d631aa0.mjs';
import '../_chunks/dep-eda9976d.mjs';
import '../_chunks/dep-f03d2f0f.mjs';
import '../_chunks/dep-94da3846.mjs';
import '../_chunks/dep-28ab9e3e.mjs';
import '../_chunks/dep-0d4a3f7e.mjs';
import '../_chunks/dep-bd1b86d0.mjs';
import '../_chunks/dep-37ea0644.mjs';
import '../_chunks/dep-1d4985f2.mjs';
import '../_chunks/dep-ace4b3db.mjs';
import '../_common/js/global-config/default-config.mjs';
import '../_common/js/global-config/locale/zh_CN.mjs';
import '../_chunks/dep-5101fc98.mjs';
import '../_chunks/dep-06adc476.mjs';
import '../_chunks/dep-eb1a861a.mjs';
import '../config-provider/type.mjs';
import '../_chunks/dep-9f3c7a03.mjs';
import '../_chunks/dep-b1273bbc.mjs';
import '../_chunks/dep-81a441b7.mjs';
import '../_chunks/dep-8c4e0f42.mjs';
import '../_chunks/dep-5b0920c8.mjs';
import '../_chunks/dep-0d26b449.mjs';
import '../_chunks/dep-90feab0a.mjs';
import '../utils/render-tnode.mjs';
import '../_chunks/dep-fb32dbe0.mjs';
import '../tag/check-tag.mjs';
import '../tag/check-tag-props.mjs';
import '../_common/js/common.mjs';
import '../tag/check-tag-group.mjs';
import '../tag/check-tag-group-props.mjs';
import '../utils/withInstall.mjs';
import './style/css.mjs';
import '../tag/type.mjs';
import '../_chunks/dep-208ab852.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function useTagList(props) {
  var renderTNode = useTNodeJSX();
  var classPrefix = usePrefixClass();
  var _toRefs = toRefs(props),
    value = _toRefs.value,
    modelValue = _toRefs.modelValue,
    onRemove = _toRefs.onRemove,
    max = _toRefs.max,
    minCollapsedNum = _toRefs.minCollapsedNum,
    size = _toRefs.size,
    tagProps = _toRefs.tagProps,
    getDragProps = _toRefs.getDragProps;
  var _useVModel = useVModel(value, modelValue, props.defaultValue || [], props.onChange),
    _useVModel2 = _slicedToArray(_useVModel, 2),
    tagValue = _useVModel2[0],
    setTagValue = _useVModel2[1];
  var oldInputValue = ref();
  var isDisabled = useDisabled();
  var isReadonly = useReadonly();
  var _onClose = function onClose(p) {
    var _onRemove$value;
    var arr = _toConsumableArray(tagValue.value);
    var _arr$splice = arr.splice(p.index, 1),
      _arr$splice2 = _slicedToArray(_arr$splice, 1),
      item = _arr$splice2[0];
    setTagValue(arr, _objectSpread(_objectSpread({
      trigger: "tag-remove"
    }, p), {}, {
      item: item
    }));
    (_onRemove$value = onRemove.value) === null || _onRemove$value === void 0 || _onRemove$value.call(onRemove, _objectSpread(_objectSpread({}, p), {}, {
      item: item,
      trigger: "tag-remove",
      value: arr
    }));
  };
  var clearAll = function clearAll(context) {
    setTagValue([], {
      trigger: "clear",
      e: context.e
    });
  };
  var onInnerEnter = function onInnerEnter(value2, context) {
    var _tagValue$value, _props$onEnter;
    var valueStr = value2 ? String(value2).trim() : "";
    var isLimitExceeded = max && ((_tagValue$value = tagValue.value) === null || _tagValue$value === void 0 ? void 0 : _tagValue$value.length) >= max.value;
    var newValue = tagValue.value;
    if (!isLimitExceeded && valueStr) {
      newValue = tagValue.value instanceof Array ? tagValue.value.concat(String(valueStr)) : [valueStr];
      setTagValue(newValue, {
        trigger: "enter",
        index: newValue.length - 1,
        item: valueStr,
        e: context.e
      });
    }
    props === null || props === void 0 || (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 || _props$onEnter.call(props, newValue, _objectSpread(_objectSpread({}, context), {}, {
      inputValue: value2
    }));
  };
  var onInputBackspaceKeyUp = function onInputBackspaceKeyUp(value2) {
    if (!tagValue.value || !tagValue.value.length) return;
    oldInputValue.value = value2;
  };
  var onInputBackspaceKeyDown = function onInputBackspaceKeyDown(value2, context) {
    var e = context.e;
    if (!tagValue.value || !tagValue.value.length || e.key === "Process" || isReadonly.value) return;
    var isDelete = /(Backspace|NumpadDelete)/i.test(e.code) || /(Backspace|NumpadDelete)/i.test(e.key);
    if (!value2 && isDelete) {
      var _onRemove$value2;
      var index = tagValue.value.length - 1;
      var item = tagValue.value[index];
      var trigger = "backspace";
      var newValue = tagValue.value.slice(0, -1);
      setTagValue(newValue, {
        e: e,
        index: index,
        item: item,
        trigger: trigger
      });
      (_onRemove$value2 = onRemove.value) === null || _onRemove$value2 === void 0 || _onRemove$value2.call(onRemove, {
        e: e,
        index: index,
        item: item,
        trigger: trigger,
        value: newValue
      });
    }
    oldInputValue.value = value2;
  };
  var renderLabel = function renderLabel(_ref) {
    var _newList$map;
    var displayNode = _ref.displayNode,
      label = _ref.label;
    var newList = minCollapsedNum.value ? tagValue.value.slice(0, minCollapsedNum.value) : tagValue.value;
    var list = displayNode ? [displayNode] : (newList === null || newList === void 0 || (_newList$map = newList.map) === null || _newList$map === void 0 ? void 0 : _newList$map.call(newList, function (item, index) {
      var _getDragProps$value;
      var tagContent = renderTNode("tag", {
        params: {
          value: item
        }
      });
      return createVNode(Tag, mergeProps({
        "key": "".concat(item).concat(index),
        "size": size.value,
        "disabled": isDisabled.value,
        "onClose": function onClose(context) {
          return _onClose({
            e: context.e,
            index: index
          });
        },
        "closable": !isReadonly.value && !isDisabled.value
      }, (_getDragProps$value = getDragProps.value) === null || _getDragProps$value === void 0 ? void 0 : _getDragProps$value.call(getDragProps, index, item), tagProps.value), {
        "default": function _default() {
          return [tagContent !== null && tagContent !== void 0 ? tagContent : item];
        }
      });
    })) || [];
    if (![null, void 0, ""].includes(label)) {
      list.unshift(createVNode("div", {
        "class": "".concat(classPrefix.value, "-tag-input__prefix"),
        "key": "label"
      }, [label]));
    }
    if (newList.length !== (tagValue.value || []).length) {
      var len = tagValue.value.length - newList.length;
      var more = renderTNode("collapsedItems", {
        params: {
          value: tagValue.value,
          count: tagValue.value.length - minCollapsedNum.value,
          collapsedTags: tagValue.value.slice(minCollapsedNum.value, tagValue.value.length),
          collapsedSelectedItems: tagValue.value.slice(minCollapsedNum.value, tagValue.value.length),
          onClose: _onClose
        }
      });
      list.push(more !== null && more !== void 0 ? more : createVNode(Tag, mergeProps({
        "key": "more",
        "size": size.value
      }, tagProps.value), {
        "default": function _default() {
          return ["+", len];
        }
      }));
    }
    return list;
  };
  return {
    tagValue: tagValue,
    clearAll: clearAll,
    onClose: _onClose,
    onInnerEnter: onInnerEnter,
    onInputBackspaceKeyUp: onInputBackspaceKeyUp,
    onInputBackspaceKeyDown: onInputBackspaceKeyDown,
    renderLabel: renderLabel
  };
}

export { useTagList as default };
//# sourceMappingURL=useTagList.mjs.map
